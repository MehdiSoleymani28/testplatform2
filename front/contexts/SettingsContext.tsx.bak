import React, { createContext, useContext, useState, useCallback, useEffect, ReactNode } from 'react';
import { SystemSettings } from '../types';
import * as api from '../services/api';
import { settingsTransformers } from '../services/settingsTransform';

interface SettingsContextType {
  settings: SystemSettings;
  updateSettings: (newSettings: SystemSettings) => Promise<void>;
  regeneratePlatformApiKey: () => Promise<void>;
}

const defaultSettings: SystemSettings = {
  maxConcurrentTests: 4,
  platformApiKey: '',
  openaiApiKey: '',
  geminiApiKey: '',
};

const SettingsContext = createContext<SettingsContextType | null>(null);

export const SettingsProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [settings, setSettings] = useState<SystemSettings>(defaultSettings);

  const fetchSettings = useCallback(async () => {
    try {
      const response = await api.getSettings();
      const transformedSettings = settingsTransformers.fromApi(response);
      setSettings(transformedSettings);
    } catch (error) {
      console.error('Failed to fetch settings:', error);
    }
  }, []);

  useEffect(() => {
    fetchSettings();
  }, [fetchSettings]);

  const updateSettingsHandler = async (newSettings: SystemSettings) => {
    try {
      const transformedSettings = settingsTransformers.toApi(newSettings);
      console.log('Sending settings update:', transformedSettings); // اضافه کردن لاگ
      await api.updateSettings(transformedSettings);
      }

      // پس از موفقیت همه تغییرات، state را آپدیت می‌کنیم
      setSettings(newSettings);
    } catch (error) {
      console.error('Failed to update settings:', error);
      throw error;
    }
  };

  const regeneratePlatformApiKey = async () => {
    try {
      const settingToUpdate = {
        key: 'platformApiKey',
        value: 'regenerate',
        projectId: null
      };
      console.log('Regenerating platform API key:', settingToUpdate); // اضافه کردن لاگ
      await api.updateSettings(settingToUpdate);
      await fetchSettings();
    } catch (error) {
      console.error('Failed to regenerate platform API key:', error);
      throw error;
    }
  };

  return (
    <SettingsContext.Provider value={{
      settings,
      updateSettings: updateSettingsHandler,
      regeneratePlatformApiKey
    }}>
      {children}
    </SettingsContext.Provider>
  );
};

export const useSettings = (): SettingsContextType => {
  const context = useContext(SettingsContext);
  if (!context) {
    throw new Error('useSettings must be used within a SettingsProvider');
  }
  return context;
};
