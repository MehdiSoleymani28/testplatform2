import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository, IsNull } from 'typeorm';
import { Setting } from './setting.entity';
import { Project } from '../project/project.entity';
import { CreateSettingDto, UpdateSettingDto } from './setting.dto';

@Injectable()
export class SettingService {
  constructor(
    @InjectRepository(Setting)
    private readonly settingRepository: Repository<Setting>,
    @InjectRepository(Project)
    private readonly projectRepository: Repository<Project>,
  ) {}

  async findAll(projectId?: number): Promise<Setting[]> {
    if (projectId) {
      return this.settingRepository.find({ where: { projectId }, relations: ['project'] });
    }
    return this.settingRepository.find({ relations: ['project'] });
  }

  async findOne(id: number): Promise<Setting | null> {
    return this.settingRepository.findOne({ where: { id }, relations: ['project'] });
  }

  async create(dto: CreateSettingDto): Promise<Setting> {
    let project: Project | null = null;
    if (dto.projectId !== undefined && dto.projectId !== null) {
      project = await this.projectRepository.findOne({ where: { id: dto.projectId } });
    }
    const setting = this.settingRepository.create({
      projectId: project?.id,
      key: dto.key,
      value: dto.value,
    });
    return this.settingRepository.save(setting);
  }

  async update(id: number, dto: UpdateSettingDto): Promise<Setting | null> {
    const setting = await this.settingRepository.findOne({ where: { id } });
    if (!setting) return null;
    if (dto.key) setting.key = dto.key;
    if (dto.value) setting.value = dto.value;
    return this.settingRepository.save(setting);
  }

  async remove(id: number): Promise<void> {
    await this.settingRepository.delete(id);
  }

  async updateSystemSettings(data: { settings: { key: string; value: string; }[] }): Promise<Setting[]> {
    const results: Setting[] = [];
    
    for (const settingItem of data.settings) {
        const { key, value } = settingItem;
        
        // Find existing setting
        let setting = await this.settingRepository.findOne({
            where: { key, projectId: IsNull() },
            relations: ['project']
        });

        if (setting) {
            // Update existing setting
            setting.value = value;
            const savedSetting = await this.settingRepository.save(setting);
            results.push(savedSetting);
        } else {
            // Create new setting
            const newSetting = this.settingRepository.create({
                key,
                value,
                projectId: undefined
            });
            const savedSetting = await this.settingRepository.save(newSetting);
            results.push(savedSetting);
        }
    }
    
    return results;
  }
}
